@page "/transform"
@using System
@using System.Collections.Generic;
@using System.Linq
@using QueryTreatment
@using MissenseVariantInfoSeparation
 

<h3>Standard nomenclature for missense (from p. to c.)</h3>

<input size="100" @bind="missenseVariantQuery" placeholder="Write missense variant separated by semicolons (;)"/>
<button @onclick="QueryMissense">Query</button>
<ol>
    @if (toView)
    {
            
            @foreach(KeyValuePair<GetMissenseInfos, List<string>> item in listOfEachMissenseForNomenclature)
            {
                <li>@item.Key.missensePNomenclature</li>
                <ul>
                    @foreach(string nomenclature in item.Value)
                    {
                        <li>@nomenclature</li>
                    }
                </ul>
            }

    }
</ol>

@code {
    
    static string missenseVariantQuery;
    static string[] listMissenseQuery;
    static bool isListValid; 
    static bool toView = false;
    static List<GetMissenseInfos> missenseVariantsObjectToView = new List<GetMissenseInfos>();
    static Dictionary<GetMissenseInfos, List<string>> listOfEachMissenseForNomenclature = new Dictionary<GetMissenseInfos, List<string>>();

    static void QueryMissense()
    {
        listMissenseQuery = MissenseVariant.MissenseVariantToList(missenseVariantQuery);
        isListValid = MissenseVariant.MissenseValidation(listMissenseQuery);
        if (isListValid)
        {
            List<GetMissenseInfos> missenseVariantsObject = new List<GetMissenseInfos>();
            foreach (string missenseVariant in listMissenseQuery)
            {
                GetMissenseInfos missenseObject = new GetMissenseInfos(missenseVariant);
                missenseVariantsObject.Add(missenseObject);
            }
            
            missenseVariantsObjectToView = missenseVariantsObject;
            listOfEachMissenseForNomenclature = GetMissenseInfos.GetCodonsCompared(missenseVariantsObject);
            toView = true;
        } 
    }
}